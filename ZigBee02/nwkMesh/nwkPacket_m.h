//
// Generated file, do not edit! Created by nedtool 5.0 from nwkMesh/nwkPacket.msg.
//

#ifndef __NWKPACKET_M_H
#define __NWKPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>nwkMesh/nwkPacket.msg:16</tt> by nedtool.
 * <pre>
 * packet nwkPacket
 * {
 *     bool spoofed;
 * 
 *     int srcAddress;
 *     int destAddress;
 *     int srcPANAddress;
 *     int destPANAddress;
 * 
 *     int type;
 * }
 * </pre>
 */
class nwkPacket : public ::omnetpp::cPacket
{
  protected:
    bool spoofed;
    int srcAddress;
    int destAddress;
    int srcPANAddress;
    int destPANAddress;
    int type;

  private:
    void copy(const nwkPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const nwkPacket&);

  public:
    nwkPacket(const char *name=nullptr, int kind=0);
    nwkPacket(const nwkPacket& other);
    virtual ~nwkPacket();
    nwkPacket& operator=(const nwkPacket& other);
    virtual nwkPacket *dup() const {return new nwkPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual bool getSpoofed() const;
    virtual void setSpoofed(bool spoofed);
    virtual int getSrcAddress() const;
    virtual void setSrcAddress(int srcAddress);
    virtual int getDestAddress() const;
    virtual void setDestAddress(int destAddress);
    virtual int getSrcPANAddress() const;
    virtual void setSrcPANAddress(int srcPANAddress);
    virtual int getDestPANAddress() const;
    virtual void setDestPANAddress(int destPANAddress);
    virtual int getType() const;
    virtual void setType(int type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const nwkPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, nwkPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nwkMesh/nwkPacket.msg:27</tt> by nedtool.
 * <pre>
 * packet RREQ
 * {
 *     int hopCount;
 *     int RREQID;
 *     int destPANAddress;
 *     int originatorPANAddress;
 *     int hopPANAddress;
 * }
 * </pre>
 */
class RREQ : public ::omnetpp::cPacket
{
  protected:
    int hopCount;
    int RREQID;
    int destPANAddress;
    int originatorPANAddress;
    int hopPANAddress;

  private:
    void copy(const RREQ& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RREQ&);

  public:
    RREQ(const char *name=nullptr, int kind=0);
    RREQ(const RREQ& other);
    virtual ~RREQ();
    RREQ& operator=(const RREQ& other);
    virtual RREQ *dup() const {return new RREQ(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual int getRREQID() const;
    virtual void setRREQID(int RREQID);
    virtual int getDestPANAddress() const;
    virtual void setDestPANAddress(int destPANAddress);
    virtual int getOriginatorPANAddress() const;
    virtual void setOriginatorPANAddress(int originatorPANAddress);
    virtual int getHopPANAddress() const;
    virtual void setHopPANAddress(int hopPANAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RREQ& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RREQ& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nwkMesh/nwkPacket.msg:35</tt> by nedtool.
 * <pre>
 * packet RREP
 * {
 *     int RREQID;
 *     int originatorPANAddress;
 *     int hopsLeft;
 *     int destPANAddress;
 *     int hopPANAddress;
 * }
 * </pre>
 */
class RREP : public ::omnetpp::cPacket
{
  protected:
    int RREQID;
    int originatorPANAddress;
    int hopsLeft;
    int destPANAddress;
    int hopPANAddress;

  private:
    void copy(const RREP& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RREP&);

  public:
    RREP(const char *name=nullptr, int kind=0);
    RREP(const RREP& other);
    virtual ~RREP();
    RREP& operator=(const RREP& other);
    virtual RREP *dup() const {return new RREP(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getRREQID() const;
    virtual void setRREQID(int RREQID);
    virtual int getOriginatorPANAddress() const;
    virtual void setOriginatorPANAddress(int originatorPANAddress);
    virtual int getHopsLeft() const;
    virtual void setHopsLeft(int hopsLeft);
    virtual int getDestPANAddress() const;
    virtual void setDestPANAddress(int destPANAddress);
    virtual int getHopPANAddress() const;
    virtual void setHopPANAddress(int hopPANAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RREP& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RREP& obj) {obj.parsimUnpack(b);}


#endif // ifndef __NWKPACKET_M_H

